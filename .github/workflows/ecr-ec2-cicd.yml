# ⁠Add AWS credentials to GitHub repo secrets and update the pipeline to push the image to the ECR repo instead of the Docker Hub
# Going to use actions from -> https://github.com/marketplace?query=aws-actions
name: CICD pipeline with ECR and EC2
run-name: CICD pipeline with ECR and EC2
on:
  # The code get pushed when the pull request is merged to the main branch from another branch
  # So, we are going to trigger this workflow when the code is pushed to the main branch
  push:
    branches:
      - main
  workflow_dispatch:
# Defining environment variables for the whole workflow
env:
  SSH_USER: ${{secrets.SSH_USER}}
  SSH_HOST: ${{secrets.SSH_HOST}}
  SSH_PRIVATE_KEY: ${{secrets.SSH_PRIVATE_KEY}}
  AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
  AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
  AWS_REGION: ${{secrets.AWS_REGION}}
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  IMAGE_TAG: ${{ secrets.IMAGE_TAG }}
jobs:
  ecr:
    name: Build and Push Image to ECR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      # We need to configure the AWS credentials
      # AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_REGION
      # What happens here is that the AWS credentials are set as environment variables
      # Used to authenticate with AWS ECR
      # https://github.com/marketplace/actions/configure-aws-credentials-action-for-github-actions
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: ${{secrets.AWS_REGION}}
      # Login to AWS ECR
      - name: Login to Amazon ECR
        # We need this id to get an output of this step to use it in the next step
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      # Build, Tag, and Push Image to Amazon ECR
      - name: Build, Tag, and Push Image to Amazon ECR
        id: build-image
        run: |
          docker build . -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  ec2:
    needs: ecr
    name: Deploy Docker Container to EC2
    runs-on: ubuntu-latest
    steps:
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/github-actions.pem
          chmod 600 ~/.ssh/github-actions.pem
      - name: Install and Start Docker on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/github-actions.pem $SSH_USER@$SSH_HOST "
            # Check if Docker is installed
            if ! command -v docker &> /dev/null; then
              sudo apt-get update &&
              sudo apt-get install -y docker.io &&
              sudo systemctl start docker &&
              sudo systemctl enable docker
            else
              echo 'Docker is already installed.'
            # fi is used to end the if statement
            fi
          " || exit 1
      - name: Install AWS CLI on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/github-actions.pem $SSH_USER@$SSH_HOST "
            sudo apt-get update &&
            # Install snapd
            sudo apt-get install -y snapd &&
            # Install AWS CLI
            if ! command -v aws &> /dev/null; then
              # sudo apt install awscli -y, does not work on Ubuntu 20.04        
              sudo snap install aws-cli --classic;
            else
              echo 'AWS CLI is already installed';
            fi
            aws --version
            " || exit 1
      - name: Configure AWS Credentials on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/github-actions.pem $SSH_USER@$SSH_HOST "
            # Configure AWS credentials
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID &&
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY &&
            aws configure set region $AWS_REGION
          " || exit 1
      - name: Login to Amazon ECR on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/github-actions.pem $SSH_USER@$SSH_HOST "
            # Get the password to login to ECR and login through Docker
            aws ecr get-login-password --region $AWS_REGION | sudo docker login --username AWS --password-stdin $ECR_REGISTRY
          " || exit 1
      - name: Pull and Run Docker Image on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/github-actions.pem $SSH_USER@$SSH_HOST "
            # Stop and remove the container if it is already running
            # Added || true to avoid the error if the container is not running
            sudo docker stop docker-react-ecr || true &&
            sudo docker rm docker-react-ecr || true &&
            # Remove the image if it already exists
            sudo docker rmi -f $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG &&
            # Pull the image from ECR and run it
            sudo docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG &&
            sudo docker run --name docker-react-ecr -d -p 80:3000 $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          "
