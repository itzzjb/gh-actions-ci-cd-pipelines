# Pipeline to build and push Docker image to Docker Hub when there are changes in the main branch
# Going to use actions from -> https://github.com/marketplace?query=docker
name: CICD pipeline with DockerHub and EC2
run-name: CICD pipeline with DockerHub and EC2
on:
  # The code get pushed when the pull request is merged to the main branch from another branch
  # So, we are going to trigger this workflow when the code is pushed to the main branch
  push:
    branches:
      - main
  workflow_dispatch:
jobs:
  docker:
    name: Build and Push Docker Image to DockerHub
    runs-on: ubuntu-latest
    steps:
      # Checkout the code
      - name: Checkout
        uses: actions/checkout@v4
      # Ubuntu-latest has Docker pre-installed
      # Login to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{secrets.DOCKER_USERNAME}} # Docker Hub username
          password: ${{secrets.DOCKER_PASSWORD}} # Docker Hub password
      # Build the Docker image
      - name: Build & Push the Docker Image
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: itzzjb/docker-react:latest
  deploy:
    needs: docker
    name: Deploy to EC2
    # We have self hosted a EC2 instance as a runner from the repository settings
    # Now, we are going to use that runner to deploy the Docker image to the EC2 instance
    # We can manually installed Docker on the EC2 instance
    runs-on: self-hosted
    steps:
      # Login to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Verify Docker Login
        run: docker info
      - name: Pull the Docker Image
        run: sudo docker pull itzzjb/docker-react:latest
      - name: Remove the existing container
        # rm -f -> Remove the container forcefully
        # We need to set || true to ignore the error if the container does not exist
        run: sudo docker rm -f docker-react || true
      - name: Run the Docker Container
        run: sudo docker run -d -p 3000:3000 --name docker-react itzzjb/docker-react:latest
# Note:
# The './run.sh' script is used to start the GitHub Actions self-hosted runner.
# When executed, it initiates the runner process that listens for jobs from GitHub Actions.

# The script:
# 1. Registers the runner with the GitHub repository or organization.
# 2. Enters a loop, continuously polling GitHub for any incoming workflow jobs to execute.
# 3. Executes the job on the host machine when one is received.
# 4. Handles cleanup after the job is completed, then resumes polling for the next job.

# If the runner process is stopped (e.g., by closing the terminal), the runner will no longer
# be able to receive or execute jobs. Using 'nohup ./run.sh &' allows the runner to continue
# running in the background, ensuring it remains active even after the SSH session ends.

# To configure using nginx as a reverse proxy server, follow the steps below:
# 1. Install nginx on the EC2 instance.
# 2. Create a new configuration file in the /etc/nginx/sites-available directory.
# 3. Find the IP Address of the docker container using the command 'docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' container_name'.
# 4. Add the following configuration to the new file:
# server {

#    ... cont.

#     location / {
#         proxy_pass http://container_ip:container_port;

#     ... cont.
#     }

# }
# 5. Create a symbolic link to the sites-enabled directory using the command 'sudo ln -s /etc/nginx/sites-available/file_name /etc/nginx/sites-enabled/'.
# 6. Restart the nginx service using the command 'sudo systemctl restart nginx'.
